// <auto-generated />
using System;
using Meta.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Meta.Migrations
{
    [DbContext(typeof(MetaDBContext))]
    [Migration("20220105121853_active")]
    partial class active
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Meta.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("Meta.Models.Audio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AudioKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<int>("UrlId")
                        .HasColumnType("int")
                        .HasColumnName("UrlID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UrlId" }, "IX_Audio_UrlID");

                    b.ToTable("Audio");
                });

            modelBuilder.Entity("Meta.Models.Buying", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilmId")
                        .HasColumnType("int")
                        .HasColumnName("FilmID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FilmId" }, "IX_Buying_FilmID");

                    b.HasIndex(new[] { "UserId" }, "IX_Buying_UserID");

                    b.ToTable("Buying");
                });

            modelBuilder.Entity("Meta.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Meta.Models.CategoryLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("LanguageKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_CategoryLanguage_CategoryID");

                    b.ToTable("CategoryLanguage");
                });

            modelBuilder.Entity("Meta.Models.CinemaLab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UrlId")
                        .HasColumnType("int")
                        .HasColumnName("UrlID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "IX_CinemaLab_ContentID");

                    b.HasIndex(new[] { "UrlId" }, "IX_CinemaLab_UrlID");

                    b.ToTable("CinemaLab");
                });

            modelBuilder.Entity("Meta.Models.CinemaLabToComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CinemaLabId")
                        .HasColumnType("int")
                        .HasColumnName("CinemaLabID");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CinemaLabId" }, "IX_CinemaLabToComment_CinemaLabID");

                    b.HasIndex(new[] { "CommentId" }, "IX_CinemaLabToComment_CommentID");

                    b.ToTable("CinemaLabToComment");
                });

            modelBuilder.Entity("Meta.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Spolier")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Comment_UserID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Meta.Models.CommentToComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<int>("ReplyCommentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReplyCommentId");

                    b.ToTable("CommentToComment");
                });

            modelBuilder.Entity("Meta.Models.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Hit")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("MainPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeID");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("Meta.Models.ContentLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "IX_ContentLanguage_ContentID");

                    b.ToTable("ContentLanguage");
                });

            modelBuilder.Entity("Meta.Models.ContentToActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("ActorID");

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActorId" }, "IX_ContentToActor_ActorID");

                    b.HasIndex(new[] { "ContentId" }, "IX_ContentToActor_ContentID");

                    b.ToTable("ContentToActor");
                });

            modelBuilder.Entity("Meta.Models.ContentToCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_ContentToCategory_CategoryID");

                    b.HasIndex(new[] { "ContentId" }, "IX_ContentToCategory_ContentID");

                    b.ToTable("ContentToCategory");
                });

            modelBuilder.Entity("Meta.Models.ContentToDirector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("DirectorID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "IX_ContentToDirector_ContentID");

                    b.HasIndex(new[] { "DirectorId" }, "IX_ContentToDirector_DirectorID");

                    b.ToTable("ContentToDirector");
                });

            modelBuilder.Entity("Meta.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Director");
                });

            modelBuilder.Entity("Meta.Models.FavoryContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "IX_FavoryContent_ContentID");

                    b.HasIndex(new[] { "UserId" }, "IX_FavoryContent_UserID");

                    b.ToTable("FavoryContent");
                });

            modelBuilder.Entity("Meta.Models.FavorySeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnName("SeriesID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeriesId" }, "IX_FavorySeries_SeriesID");

                    b.HasIndex(new[] { "UserId" }, "IX_FavorySeries_UserID");

                    b.ToTable("FavorySeries");
                });

            modelBuilder.Entity("Meta.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<decimal>("Imdb")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int")
                        .HasColumnName("UrlID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "IX_Film_ContentID");

                    b.HasIndex(new[] { "UrlId" }, "IX_Film_UrlID");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("Meta.Models.FilmToComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<int>("FilmId")
                        .HasColumnType("int")
                        .HasColumnName("FilmID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommentId" }, "IX_FilmToComment_CommentID");

                    b.HasIndex(new[] { "FilmId" }, "IX_FilmToComment_FilmID");

                    b.ToTable("FilmToComment");
                });

            modelBuilder.Entity("Meta.Models.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UrlId")
                        .HasColumnType("int")
                        .HasColumnName("UrlID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UrlId" }, "IX_History_UrlID");

                    b.HasIndex(new[] { "UserId" }, "IX_History_UserID");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Meta.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Meta.Models.LikedContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "IX_LikedContent_ContentID");

                    b.HasIndex(new[] { "UserId" }, "IX_LikedContent_UserID");

                    b.ToTable("LikedContent");
                });

            modelBuilder.Entity("Meta.Models.LikedSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<DateTime>("LikedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnName("SeriesID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "IX_LikedSeries_ContentID");

                    b.HasIndex(new[] { "SeriesId" }, "IX_LikedSeries_SeriesID");

                    b.HasIndex(new[] { "UserId" }, "IX_LikedSeries_UserID");

                    b.ToTable("LikedSeries");
                });

            modelBuilder.Entity("Meta.Models.Paket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdvertise")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Paket");
                });

            modelBuilder.Entity("Meta.Models.PayFullFilm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId")
                        .HasColumnType("int")
                        .HasColumnName("FilmID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FilmId" }, "IX_PayFullFilm_FilmID");

                    b.ToTable("PayFullFilm");
                });

            modelBuilder.Entity("Meta.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Meta.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MainPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeasonNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TvShowId")
                        .HasColumnType("int")
                        .HasColumnName("TvShowID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TvShowId" }, "IX_Season_TvShowID");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("Meta.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasColumnName("SeasonID");

                    b.Property<string>("SeriaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int")
                        .HasColumnName("UrlID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeasonId" }, "IX_Series_SeasonID");

                    b.HasIndex(new[] { "UrlId" }, "IX_Series_UrlID");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Meta.Models.SeriesLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnName("SeriesID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeriesId" }, "IX_SeriesLanguage_SeriesID");

                    b.ToTable("SeriesLanguage");
                });

            modelBuilder.Entity("Meta.Models.SeriesToComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnName("SeriesID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommentId" }, "IX_SeriesToComment_CommentID");

                    b.HasIndex(new[] { "SeriesId" }, "IX_SeriesToComment_SeriesID");

                    b.ToTable("SeriesToComment");
                });

            modelBuilder.Entity("Meta.Models.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Subscriber_UserID");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("Meta.Models.SubscriperToPaket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaketDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaketId")
                        .HasColumnType("int")
                        .HasColumnName("PaketID");

                    b.Property<int?>("SubscriberId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriberID");

                    b.Property<int>("SubscriperId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriperID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PaketId" }, "IX_SubscriperToPaket_PaketID");

                    b.HasIndex(new[] { "SubscriberId" }, "IX_SubscriperToPaket_SubscriberID");

                    b.ToTable("SubscriperToPaket");
                });

            modelBuilder.Entity("Meta.Models.Subtitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("SubtitleKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubtitleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int")
                        .HasColumnName("UrlID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UrlId" }, "IX_Subtitle_UrlID");

                    b.ToTable("Subtitle");
                });

            modelBuilder.Entity("Meta.Models.Trailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trailer");
                });

            modelBuilder.Entity("Meta.Models.TrailerToContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("ContentID");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int")
                        .HasColumnName("TrailerID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "IX_TrailerToContent_ContentID");

                    b.HasIndex(new[] { "TrailerId" }, "IX_TrailerToContent_TrailerID");

                    b.ToTable("TrailerToContent");
                });

            modelBuilder.Entity("Meta.Models.TrailerToSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasColumnName("SeasonID");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int")
                        .HasColumnName("TrailerID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeasonId" }, "IX_TrailerToSeason_SeasonID");

                    b.HasIndex(new[] { "TrailerId" }, "IX_TrailerToSeason_TrailerID");

                    b.ToTable("TrailerToSeason");
                });

            modelBuilder.Entity("Meta.Models.TrailerToSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnName("SeriesID");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int")
                        .HasColumnName("TrailerID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeriesId" }, "IX_TrailerToSeries_SeriesID");

                    b.HasIndex(new[] { "TrailerId" }, "IX_TrailerToSeries_TrailerID");

                    b.ToTable("TrailerToSeries");
                });

            modelBuilder.Entity("Meta.Models.TvShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Imdb")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TvShow");
                });

            modelBuilder.Entity("Meta.Models.Type", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Meta.Models.Url", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UrlName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Url");
                });

            modelBuilder.Entity("Meta.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Meta.Models.UserToRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserToRole_RoleID");

                    b.HasIndex(new[] { "UserId" }, "IX_UserToRole_UserID");

                    b.ToTable("UserToRole");
                });

            modelBuilder.Entity("Meta.Models.Audio", b =>
                {
                    b.HasOne("Meta.Models.Url", "Url")
                        .WithMany("Audios")
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Url");
                });

            modelBuilder.Entity("Meta.Models.Buying", b =>
                {
                    b.HasOne("Meta.Models.Film", "Film")
                        .WithMany("Buyings")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.User", "User")
                        .WithMany("Buyings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.Models.CategoryLanguage", b =>
                {
                    b.HasOne("Meta.Models.Category", "Category")
                        .WithMany("CategoryLanguages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Meta.Models.CinemaLab", b =>
                {
                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("CinemaLabs")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Url", "Url")
                        .WithMany("CinemaLabs")
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("Meta.Models.CinemaLabToComment", b =>
                {
                    b.HasOne("Meta.Models.CinemaLab", "CinemaLab")
                        .WithMany("CinemaLabToComments")
                        .HasForeignKey("CinemaLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Comment", "Comment")
                        .WithMany("CinemaLabToComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CinemaLab");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Meta.Models.Comment", b =>
                {
                    b.HasOne("Meta.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.Models.CommentToComment", b =>
                {
                    b.HasOne("Meta.Models.Comment", "Comment")
                        .WithMany("CommentToCommentComments")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_CommentToComment_Comment")
                        .IsRequired();

                    b.HasOne("Meta.Models.Comment", "ReplyCommentNavigation")
                        .WithMany("CommentToCommentReplyCommentNavigations")
                        .HasForeignKey("ReplyCommentId")
                        .HasConstraintName("FK_CommentToComment_Comment1")
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("ReplyCommentNavigation");
                });

            modelBuilder.Entity("Meta.Models.Content", b =>
                {
                    b.HasOne("Meta.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Meta.Models.ContentLanguage", b =>
                {
                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("ContentLanguages")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Meta.Models.ContentToActor", b =>
                {
                    b.HasOne("Meta.Models.Actor", "Actor")
                        .WithMany("ContentToActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("ContentToActors")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Meta.Models.ContentToCategory", b =>
                {
                    b.HasOne("Meta.Models.Category", "Category")
                        .WithMany("ContentToCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("ContentToCategories")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Meta.Models.ContentToDirector", b =>
                {
                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("ContentToDirectors")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Director", "Director")
                        .WithMany("ContentToDirectors")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Meta.Models.FavoryContent", b =>
                {
                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("FavoryContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.User", "User")
                        .WithMany("FavoryContents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.Models.FavorySeries", b =>
                {
                    b.HasOne("Meta.Models.Series", "Series")
                        .WithMany("FavorySeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.User", "User")
                        .WithMany("FavorySeries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.Models.Film", b =>
                {
                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("Films")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Url", "Url")
                        .WithMany("Films")
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("Meta.Models.FilmToComment", b =>
                {
                    b.HasOne("Meta.Models.Comment", "Comment")
                        .WithMany("FilmToComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Film", "Film")
                        .WithMany("FilmToComments")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Meta.Models.History", b =>
                {
                    b.HasOne("Meta.Models.Url", "Url")
                        .WithMany("Histories")
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Url");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.Models.LikedContent", b =>
                {
                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("LikedContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.User", "User")
                        .WithMany("LikedContents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.Models.LikedSeries", b =>
                {
                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("LikedSeries")
                        .HasForeignKey("ContentId");

                    b.HasOne("Meta.Models.Series", "Series")
                        .WithMany("LikedSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.User", "User")
                        .WithMany("LikedSeries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.Models.PayFullFilm", b =>
                {
                    b.HasOne("Meta.Models.Film", "Film")
                        .WithMany("PayFullFilms")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Meta.Models.Season", b =>
                {
                    b.HasOne("Meta.Models.TvShow", "TvShow")
                        .WithMany("Seasons")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("Meta.Models.Series", b =>
                {
                    b.HasOne("Meta.Models.Season", "Season")
                        .WithMany("Series")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Url", "Url")
                        .WithMany("Series")
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("Meta.Models.SeriesLanguage", b =>
                {
                    b.HasOne("Meta.Models.Series", "Series")
                        .WithMany("SeriesLanguages")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Meta.Models.SeriesToComment", b =>
                {
                    b.HasOne("Meta.Models.Comment", "Comment")
                        .WithMany("SeriesToComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Series", "Series")
                        .WithMany("SeriesToComments")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Meta.Models.Subscriber", b =>
                {
                    b.HasOne("Meta.Models.User", "User")
                        .WithMany("Subscribers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.Models.SubscriperToPaket", b =>
                {
                    b.HasOne("Meta.Models.Paket", "Paket")
                        .WithMany("SubscriperToPakets")
                        .HasForeignKey("PaketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriperToPakets")
                        .HasForeignKey("SubscriberId");

                    b.Navigation("Paket");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Meta.Models.Subtitle", b =>
                {
                    b.HasOne("Meta.Models.Url", "Url")
                        .WithMany("Subtitles")
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Url");
                });

            modelBuilder.Entity("Meta.Models.TrailerToContent", b =>
                {
                    b.HasOne("Meta.Models.Content", "Content")
                        .WithMany("TrailerToContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Trailer", "Trailer")
                        .WithMany("TrailerToContents")
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("Meta.Models.TrailerToSeason", b =>
                {
                    b.HasOne("Meta.Models.Season", "Season")
                        .WithMany("TrailerToSeasons")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Trailer", "Trailer")
                        .WithMany("TrailerToSeasons")
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("Meta.Models.TrailerToSeries", b =>
                {
                    b.HasOne("Meta.Models.Series", "Series")
                        .WithMany("TrailerToSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.Trailer", "Trailer")
                        .WithMany("TrailerToSeries")
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("Meta.Models.UserToRole", b =>
                {
                    b.HasOne("Meta.Models.Role", "Role")
                        .WithMany("UserToRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meta.Models.User", "User")
                        .WithMany("UserToRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meta.Models.Actor", b =>
                {
                    b.Navigation("ContentToActors");
                });

            modelBuilder.Entity("Meta.Models.Category", b =>
                {
                    b.Navigation("CategoryLanguages");

                    b.Navigation("ContentToCategories");
                });

            modelBuilder.Entity("Meta.Models.CinemaLab", b =>
                {
                    b.Navigation("CinemaLabToComments");
                });

            modelBuilder.Entity("Meta.Models.Comment", b =>
                {
                    b.Navigation("CinemaLabToComments");

                    b.Navigation("CommentToCommentComments");

                    b.Navigation("CommentToCommentReplyCommentNavigations");

                    b.Navigation("FilmToComments");

                    b.Navigation("SeriesToComments");
                });

            modelBuilder.Entity("Meta.Models.Content", b =>
                {
                    b.Navigation("CinemaLabs");

                    b.Navigation("ContentLanguages");

                    b.Navigation("ContentToActors");

                    b.Navigation("ContentToCategories");

                    b.Navigation("ContentToDirectors");

                    b.Navigation("FavoryContents");

                    b.Navigation("Films");

                    b.Navigation("LikedContents");

                    b.Navigation("LikedSeries");

                    b.Navigation("TrailerToContents");
                });

            modelBuilder.Entity("Meta.Models.Director", b =>
                {
                    b.Navigation("ContentToDirectors");
                });

            modelBuilder.Entity("Meta.Models.Film", b =>
                {
                    b.Navigation("Buyings");

                    b.Navigation("FilmToComments");

                    b.Navigation("PayFullFilms");
                });

            modelBuilder.Entity("Meta.Models.Paket", b =>
                {
                    b.Navigation("SubscriperToPakets");
                });

            modelBuilder.Entity("Meta.Models.Role", b =>
                {
                    b.Navigation("UserToRoles");
                });

            modelBuilder.Entity("Meta.Models.Season", b =>
                {
                    b.Navigation("Series");

                    b.Navigation("TrailerToSeasons");
                });

            modelBuilder.Entity("Meta.Models.Series", b =>
                {
                    b.Navigation("FavorySeries");

                    b.Navigation("LikedSeries");

                    b.Navigation("SeriesLanguages");

                    b.Navigation("SeriesToComments");

                    b.Navigation("TrailerToSeries");
                });

            modelBuilder.Entity("Meta.Models.Subscriber", b =>
                {
                    b.Navigation("SubscriperToPakets");
                });

            modelBuilder.Entity("Meta.Models.Trailer", b =>
                {
                    b.Navigation("TrailerToContents");

                    b.Navigation("TrailerToSeasons");

                    b.Navigation("TrailerToSeries");
                });

            modelBuilder.Entity("Meta.Models.TvShow", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("Meta.Models.Url", b =>
                {
                    b.Navigation("Audios");

                    b.Navigation("CinemaLabs");

                    b.Navigation("Films");

                    b.Navigation("Histories");

                    b.Navigation("Series");

                    b.Navigation("Subtitles");
                });

            modelBuilder.Entity("Meta.Models.User", b =>
                {
                    b.Navigation("Buyings");

                    b.Navigation("Comments");

                    b.Navigation("FavoryContents");

                    b.Navigation("FavorySeries");

                    b.Navigation("Histories");

                    b.Navigation("LikedContents");

                    b.Navigation("LikedSeries");

                    b.Navigation("Subscribers");

                    b.Navigation("UserToRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
